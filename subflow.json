    {
        "id": "3e85e6a5f3bc71b9",
        "type": "subflow",
        "name": "HASS Flow",
        "info": "Make a flow control from Home Assistant by make this node as receiver node",
        "category": "RACKBUS",
        "in": [
            {
                "x": 240,
                "y": 140,
                "wires": [
                    {
                        "id": "6015dcca607c76cb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 140,
                "wires": [
                    {
                        "id": "6015dcca607c76cb",
                        "port": 0
                    }
                ]
            },
            {
                "x": 640,
                "y": 200,
                "wires": [
                    {
                        "id": "6015dcca607c76cb",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "GLOBAL_NAME",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-globe",
                    "label": {
                        "en-US": "Global Name"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-racksync-hass-flow",
            "version": "0.1.1",
            "author": "RACKSYNC CO., LTD. <jack@racksync.com>",
            "desc": "Make a flow control from Home Assistant by make this node as receiver node",
            "keywords": "Home Assistant, HASS, RACKSYNC, Flow, Input Boolean, Flow",
            "license": "Apache-2.0"
        },
        "color": "#befc03",
        "inputLabels": [
            "input boolean from home assistant"
        ],
        "outputLabels": [
            "flow on",
            "flow off"
        ],
        "icon": "node-red/arrow-in.svg",
        "status": {
            "x": 620,
            "y": 80,
            "wires": [
                {
                    "id": "6015dcca607c76cb",
                    "port": 0
                },
                {
                    "id": "6015dcca607c76cb",
                    "port": 1
                }
            ]
        },
    
    "flow":[
        {
            "id": "6015dcca607c76cb",
            "type": "function",
            "z": "3e85e6a5f3bc71b9",
            "name": "flow control",
            "func": "// @ts-nocheck\n// let msg1 = { payload: \"true\" };\n// let msg2 = { payload: \"false\" };\n\nlet msg1 = { payload: msg.payload };\nlet msg2 = { payload: msg.payload };\n//let global_value = msg.global_value;\nlet getGlobal = global.get(env.get(\"GLOBAL_NAME\")) || 0;\n\nif (getGlobal == \"on\") {\n    return [msg1, null];\n}\nelse {\n    return [null, msg2];\n}\n",
            "outputs": 2,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 140,
            "wires": [
                [],
                []
            ],
            "icon": "node-red/bridge.svg"
        },
        {
            "id": "6065b1f4cda2d841",
            "type": "subflow:3e85e6a5f3bc71b9",
            "z": "361e54277360b210",
            "name": "",
            "env": [
                {
                    "name": "GLOBAL_NAME",
                    "value": "global_value",
                    "type": "str"
                }
            ],
            "x": 690,
            "y": 340,
            "wires": [
                [
                    "a852f906e9a0879f"
                ],
                [
                    "f038fb06ee1b7100"
                ]
            ]
        }
    ] 
    }
